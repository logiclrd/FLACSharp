namespace libFLAC;

/** Possible values passed back to the FLAC__StreamDecoder error callback.
 *  \c FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC is the generic catch-
 *  all.  The rest could be caused by bad sync (false synchronization on
 *  data that is not the start of a frame) or corrupted data.  The error
 *  itself is the decoder's best guess at what happened assuming a correct
 *  sync.  For example \c FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER
 *  could be caused by a correct sync on the start of a frame, but some
 *  data in the frame header was corrupted.  Or it could be the result of
 *  syncing on a point the stream that looked like the starting of a frame
 *  but was not.  \c FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM
 *  could be because the decoder encountered a valid frame made by a future
 *  version of the encoder which it cannot parse, or because of a false
 *  sync making it appear as though an encountered frame was generated by
 *  a future encoder. \c FLAC__STREAM_DECODER_ERROR_STATUS_BAD_METADATA is
 *  caused by finding data that doesn't fit a metadata block (too large
 *  or too small) or finding inconsistencies in the metadata, for example
 *  a PICTURE block with an image that exceeds the size of the metadata
 *  block.
 */
public enum StreamDecoderErrorStatus
{

	LostSync,
	/**< An error in the stream caused the decoder to lose synchronization. */

	BadHeader,
	/**< The decoder encountered a corrupted frame header. */

	FrameCRCMismatch,
	/**< The frame's data did not match the CRC in the footer. */

	UnparseableStream,
	/**< The decoder encountered reserved fields in use in the stream. */

	BadMetadata,
	/**< The decoder encountered a corrupted metadata block. */

}
